buildscript {
    ext {
        axionReleaseVersion = '1.7.0'
    }
    repositories {
        maven { url "http://nexus.gnp.mx/repository/maven-central/" }
        maven { url "http://nexus.gnp.mx/repository/maven-releases/" }
        maven { url "http://nexus.gnp.mx/repository/third_party_libraries/" }
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath "pl.allegro.tech.build:axion-release-plugin:${axionReleaseVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.1.2.RELEASE'
    id 'checkstyle'
    id 'org.sonarqube' version '2.7'
    id 'jacoco'
}

group 'com.gnp.autos.wsp'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply from: "${rootDir}/jacoco.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8

def jaxbClassesDir = "${buildDir}/classes/jaxb"

repositories {
    maven { url "http://nexus.gnp.mx/repository/maven-central/"}
    maven { url "http://nexus.gnp.mx/repository/maven-releases/"}
    maven { url "http://nexus.gnp.mx/repository/third_party_libraries/"}
    mavenCentral()
    mavenLocal()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE"
    }
}

configurations {
    all*.exclude module : 'logback-classic'
    all*.exclude module : 'log4j-over-slf4j'
    jaxb
}

ext {
    minCoverageRates = [
        'instruction': 80,
        'branch'     : 55,
        'line'       : 75,
        'complexity' : 59,
        'method'     : 90,
        'class'      : 90
    ]
    
    coverageExclusions = ["**/config/**", "**/model/**", "**/error/**", "**/Application**"]
    
    pkg = "com.gnp.autos.wsp.emisor.eot"
    
    jaxbTasks = [
        jaxbContratacion: [url: "http://10.67.0.52:7959/mbr/au/sp/sce/contrato/ContratacionAutos?wsdl", package: "${pkg}.wsdl"],
        jaxbMovimientosNegocio: [url: "http://10.67.0.37/configuradorWeb/MovimientosNegocioComercialWebImplPort?wsdl", package: "${pkg}.movimiento.wsdl", auto: true, bindings: "binding.xjb"],
        jaxbMovimientosComunes: [url: "http://10.67.0.52:7918/esb/sce/info/movimientos/comunes/contrato/MovimientosComunes?wsdl", package: "${pkg}.cancelacion.wsdl", auto: true],
        jaxbEmision: [url: "http://10.67.0.52:7964/esb/auto/lp/poliza/emision?wsdl", package: "${pkg}.emision.wsdl"],
        jaxbCatalogoConfigurador: [url: "http://10.67.0.37/configuradorWeb/CatalogoConfiguradorNegocioWebImplPort?wsdl", package: "${pkg}.pasos.wsdl", auto: true],
        jaxbCatalogos: [url: "http://10.67.0.37/tallerserviciosWeb/CatalogosWebImplPort?wsdl", package: "${pkg}.TecCom.wsdl"],
        jaxbFoliador: [url: "http://10.67.0.37/odsWeb/FoliadorWebImplPort?wsdl", package: "${pkg}.foliador.wsdl"],
        jaxbCalculos: [url: "http://10.67.0.37/motorUnicoCalculoWeb/CalculoAdicionalesWebImplPort?wsdl", package: "${pkg}.calcp.wsdl"],
        jaxbConsultaPoliza: [url: "http://10.67.0.52:7964/esb/auto/lp/poliza/consulta?wsdl", package: "${pkg}.consulta.wsdl", auto: true]
    ]
}

jaxbTasks.each { n, t -> 
    tasks.create(name: n) {
        ext.sourcesDir = "${buildDir}/generated-sources/jaxb/${name}"
        ext.classesDir = jaxbClassesDir
        ext.schema = t.url
        outputs.dir classesDir
        
        doLast() {
            project.ant {
                taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask", classpath: configurations.jaxb.asPath
                mkdir(dir: sourcesDir)
                mkdir(dir: classesDir)
    
                xjc(destdir: sourcesDir, schema: schema, package: t.package) {
                    arg(value: "-wsdl")
                    if (t.auto) {
                        arg(value: "-XautoNameResolution")
                    }
                    if (t.bindings) {
                        binding(dir: "bindings") {
                            include(name: t.bindings)
                        }
                    }
                    produces(dir: sourcesDir, includes: "**/*.java")
                }
    
                javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true, debugLevel: "lines,vars,source",
                        classpath: configurations.jaxb.asPath, includeAntRuntime: false) {
                    src(path: sourcesDir)
                }
            }
        }
    }
}

dependencies {
    compile 'com.gnp.autos.wsp:AUT_MSV_WSP_Error_Handler:1.0.2'
    compile 'com.gnp.autos.wsp:AUT_MSV_WSP_Lib_Negocio:1.1.8'

    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-web-services'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-codec:commons-codec:1.11'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0'
    compile 'org.slf4j:slf4j-log4j12:1.7.25'
    compile 'org.json:json:20180813'
    
    compile 'io.springfox:springfox-swagger2:2.6.1'
    compile 'io.springfox:springfox-swagger-ui:2.6.1'

    compileOnly 'org.projectlombok:lombok:1.16.10'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.google.code.gson:gson:2.8.5'
   
    jaxbTasks.each { name, t ->
        compile files(jaxbClassesDir, {
            builtBy name
        })
    }
    
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
}

jar {
    baseName = project.property('jar.name')
    manifest {
       attributes 'Implementation-Title': project.name,
                  'Implementation-Version': project.version,
                  'Implementation-Vendor-Id': project.group,
                  'Implementation-Vendor': 'GNP',
                  'Implementation-URL': 'http://git.gnp.mx/autos/ws-preferente/wsp-emisor-eot'
    }
}

archivesBaseName = jar.baseName

javadoc {
    failOnError = false
    options.encoding = 'UTF-8'
}

springBoot {
    buildInfo()
}

scmVersion {
    useHighestVersion = true
    repository {
        pushTagsOnly = true
        customUsername = 'autoversioner'
    }
    tag {
        prefix = project.name
    }
    checks {
        uncommittedChanges = false
        aheadOfRemote = false
    }
}

project.version = scmVersion.version

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifactId = jar.baseName
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { 
                        dep -> dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username project.property("nexusUser")
                password project.property("nexusPassword")
            }
            def urlRepo = project.version.endsWith('-SNAPSHOT') ? "$nexusSnapUrl" : "$nexusUrl"
            url "$urlRepo"
        }
    }
}

checkstyle {
    sourceSets = [project.sourceSets.main]
    checkstyleMain.exclude "**/validareglas/**"
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.buildbreaker.skip", "false"
        property "sonar.exclusions", "**/config/**,**/model/**,**/error/**"
        property "sonar.coverage.exclusions", "**/config/**,**/model/**,**/util/**,**/error/**,**/Application.java"
    }
}

jacoco {
    reportsDir = file("${buildDir}/reports/jacoco/")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

test {
    systemProperty "file.encoding", "UTF-8"
}

compileJava.options.encoding = 'UTF-8'

task afterEclipseImport {
    jaxbTasks.each { name, t ->
        dependsOn name
    }
}

task wrapper( type: Wrapper ){
    gradleVersion = '4.4'
}